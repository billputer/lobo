package controls
{
	import com.adobe.serialization.json.JSON;
	import com.adobe.serialization.json.JSONParseError;
	
	import models.DataModel;
	import models.Playlist;
	import models.Status;
	import models.Track;
	
	import mx.rpc.events.*;
	import mx.rpc.http.HTTPService;
	import mx.utils.URLUtil;
	
	public class GetService
	{
		/**
	 	 *	HTTPService object that handles all requests
		 */
		private var get_service:HTTPService;
		
		/**
	 	 *	Reference to the global DataModel
		 */
		private var player_model:DataModel; 
		
		
		/**
	 	 *	Class constructor initiating the HTTPService get_service and adds proper headers and handlers.
		 *  @param url Root url of the Howl service
		 */
		public function GetService(url:String)
		{
			player_model = DataModel.get_instance();	
			
			get_service = new HTTPService();
			get_service.method = "GET";
			get_service.resultFormat = "text";
			get_service.headers = {'Accept':'application/json'};
			get_service.addEventListener(ResultEvent.RESULT, get_request_result_handler);
        	get_service.addEventListener(FaultEvent.FAULT, get_service_fault_handler);
			get_service.rootURL = url;
		}
		
		/**
	 	 *	Initiates an HTTP request to resource_uri.
		 *  @param resource_uri Howl URI to request
		 */
        public function get_request(resource_uri:String):void {
    		trace("Sending get request to '"+ get_service.rootURL + resource_uri +"'");
			get_service.url = URLUtil.getFullURL(get_service.rootURL, resource_uri);
    		get_service.send();
        }
		
       	/**
	 	 *	Handles HTTP request responses by decoding JSON and calling the appropriate handler.
		 */
        private function get_request_result_handler(event:ResultEvent):void{
        	try{
        		var json_object:Object = JSON.decode(String(event.result));
        	
				if(json_object['status']){
					status_result_handler(json_object);
				}
				else if(json_object['playlist']){
					player_model.current_playlist.set_playlist(json_object);
				}
				else if(json_object['playlists']){
					playlist_result_handler(json_object);
				}
        	}catch (error:JSONParseError){
        		trace('Error: JSON is not valid in:');
        		trace('\t\t' + String(event.result));
        	}
        	
        }
        
		/**
	 	 *	Parses updated status from the Howl server and updates model attributes.
		 *  @param json_object Representation of status in JSON.
		 */
        private function status_result_handler(json_object:Object):void{
        	var status:Status = DataModel.get_instance().status;
        	
        	if(DataModel.get_instance().output == 'howl'){
				for (var key:String in json_object.status){
					if(player_model.status.hasOwnProperty(key)){
						if(key == 'current_track'){
							this.update_track(new Track(json_object.status[key]));
						}
						else{
							player_model.status[key] = json_object.status[key];	
						}
					}
				}
				if(status.state == "playing"){
					status.start_timer();
				}
				else{
					status.stop_timer();
				}
			}
        }

		/**
	 	 *	Checks to see if current track and new_track are the same, then searches the temp_playlist to see if we already have a Track object.
		 *  @param new_track Track to update current_track with 
		 */
        private function update_track(new_track:Track):void{
        	if(player_model.status.current_track.id != new_track.id){
        		var temp_index:int = player_model.temp_playlist.index_by_id(new_track);
				if(temp_index == -1){
					player_model.status.current_track = new_track;
				}else{
					player_model.status.current_track = Track(player_model.temp_playlist.getItemAt(temp_index));
				}
        	}
			
        }
        
		/**
	 	 *	Parses updated new Playlist from the Howl server and updates model accordingly.
		 *  @param json_object Representation of a Playlist in JSON.
		 */
        private function playlist_result_handler(json_object:Object):void{
    		DataModel.get_instance().playlists.removeAll();
			DataModel.get_instance().playlist_names.removeAll();
				
			var lists:Array = [];
			var names:Array = [];
			for each(var o:Object in json_object.playlists){
				var pl:Playlist = new Playlist();
				pl.set_playlist(o);
				lists.push(pl);
				names.push(pl.name);
			}
			
			DataModel.get_instance().playlists.source = lists;
			DataModel.get_instance().playlist_names.source = names;
        }

		/**
	 	 *	Event handler that logs event information on request failure
		 *  @param event FaultEvent generated by HTTPService.  Contains information about request failure.
		 */
       	private function get_service_fault_handler(event:FaultEvent):void {
			
		    trace('Get request failed with http code: ' + event.messageId); 
		    trace('url' + HTTPService(event.target).request.toString());
    		for (var key:String in event.headers){
    			trace('\t' + key +': '+ event.headers[key]);
    		}
		}

	}
}